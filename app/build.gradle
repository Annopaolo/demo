/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'antlr'
}

sourceCompatibility = 1.8

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Antlr
    antlr "org.antlr:antlr4:4.9.2"
    compile "org.antlr:antlr4-runtime:4.9.2"

    //Vavr (functional utilities)
    implementation 'io.vavr:vavr:0.9.0'
}

generateGrammarSource {
    maxHeapSize = "64m"

    // build visitor and use long messages
    arguments += ["-visitor", "-long-messages"]

    // Keep a copy of generated sources
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/generated-src/antlr/main/com/demo/Demo"
            into "generated-src/main/java"        
        }
    }
}

clean.doLast {
    file('generated-src').deleteDir()
}

application {
    // Define the main class for the application.
    mainClass = 'demo.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "demo.App"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}